using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;


namespace MySnake
{
    class Program
    {
        static void Main()
        {
            ConsoleKeyInfo cki;
            Console.BackgroundColor = ConsoleColor.DarkGreen;
            Console.Clear();
            int n = 120, m = 28;
            Console.SetBufferSize(n,m);
            Console.SetWindowSize(n,m);
            Console.Title = "MySnake";
            Console.CursorVisible = false;
            Console.SetCursorPosition(50,10);
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("This is MySnake!");
            Console.SetCursorPosition(44, 11);

            Console.WriteLine("Press any key to continue...");
            Console.SetCursorPosition(46, 12);
            Console.WriteLine("Or press Ctrl+C to exit.");
            cki = Console.ReadKey(true);
            Snake snake = new Snake(5, 5, 10);
                Print(snake);
                while (true)
                {
                    var key = Console.ReadKey().Key;
                    switch (key)
                    {
                        case ConsoleKey.UpArrow:
                            snake.direct = Direct.Up;
                            break;
                        case ConsoleKey.DownArrow:
                            snake.direct = Direct.Down;
                            break;
                        case ConsoleKey.RightArrow:
                            snake.direct = Direct.Right;
                            break;
                        case ConsoleKey.LeftArrow:
                            snake.direct = Direct.Left;
                            break;
                    }
                    snake.Move(1);
                    Print(snake);
                }
                     
        }
        public static void Print(Snake snake)
        {
            Console.BackgroundColor = ConsoleColor.DarkGreen;
            Console.Clear();
            
            for (int i = snake.size-1; i >=0; i--)
            {
                Console.SetCursorPosition(snake[i].X, snake[i].Y);
                Console.Write("#");
            }
        }
    }
    public class Part
    {
        public int X
        { get; set; }
        public int Y
        { get; set; }
        public Part(int x = 0, int y = 0)
        {
            X = x;
            Y = y;
        }
    }
    public class Snake
    {
        private List<Part> parts;
        public Snake(int x, int y, uint size)
        {
            if (size == 0)
            {
                throw new Exception("Snake's size cann't be zero.");
            }
            parts = new List<Part>();
            for (var i = 0; i < size; i++)
            {
                parts.Add(new Part(x, y+i));
            }
        }
        public int size
        {
            get { return parts.Count; }
        }
        public Direct direct
        { get; set; }

        public Part this[int index]
        {
            get { return parts[index]; }
        }
        public void Move(int step)
        {
            int x = 0, y = 0;
            switch (direct)
            {
                case Direct.Up:
                    y = -step;
                    break;
                case Direct.Down:
                    y = step;
                    break;
                case Direct.Right:
                    x = step;
                    break;
                case Direct.Left:
                    x = -step;
                    break;
            }
            for (int i = size - 1; i > 0; i--)
            {
                parts[i].X = parts[i - 1].X;
                parts[i].Y = parts[i - 1].Y;
            }
            parts[0].X += x;
            parts[0].Y += y;

        }

    }
    public enum Direct
    {
        Up,
        Down,
        Right,
        Left
    }
}
